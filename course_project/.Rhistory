cls
debug(makeVector)
makevector(10)
makeVector(10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(100)
makeVector(1,2,3)
makeVector(1)
simple_vector<-1:10
cachemean(simple_vector)
listed_vector<-makeVector(simple_vector)
cachemean(listed_vector)
cachemean(listed_vector)
simple_vector<-1:10
cachemean(simple_vector)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
test <- read.csv("~/.FY14 Priorities/03_Training/Data Science/Coursera Data Science/coursera_getting_and_cleaning_data/test.csv")
View(test)
train <- read.csv("~/.FY14 Priorities/03_Training/Data Science/Coursera Data Science/coursera_getting_and_cleaning_data/train.csv")
View(train)
str(train$Cabin)
summary(train$Cabin)
pnorm(-1,mean=0,sd=1)
pnorm(1800,mean=1500,sd=300)
pnorm(24,mean=21,sd=5)
qnorm(.90, 1500, 300)
qnorm(.10, 21,5)
pnorm(50,45,3.2)
1-pnorm(50,45,3.2)
qnorm(.2,77,5)
choose(9,2)
dbinom(8,size=10,p=.13)
sum(dbinom(70:245, size=245, p=.25))
binomial_check<-function(n,p) {
if(n*p>=10)
print("yes")
if(n(1-p)>=10)
print("yes")
else
print("no")
}
binomial_check(500,.015)
n
n=500
n<-500
p<-.015
f(n*p>=10)
print("yes")
if(n(1-p)>=10)
print("yes")
else
print("no")
n<-100
p<-.95
if(n*p>=10)
print("yes")
else
if(n(1-p)>=10)
print("yes")
else
print("no")
if(n*p>=10)
print("yes")
else
print('no')
if(n(1-p)>=10)
print("yes")
else
print("no")
if(n*p>=10)
print("yes")
else
print('no')
if(n(1-p)>=10)
print("yes")
else
print("no")
binomial_check<-function(n,p) {
if(n*p>=10){
print("yes")
else
print('no')
}
if(n(1-p)>=10) {}
print("yes")
else
print("no")
}
}
binomial_check<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
else
print("the first condition is NOT satisfied")
}
if(n(1-p)>=10) {
print("The second condition is satisfied")
else
print("The second condition is NOT satisfied")
}
}
binomial_check<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} else {
print("the first condition is NOT satisfied")
}
if(n(1-p)>=10) {
print("The second condition is satisfied")
}else {
print("The second condition is NOT satisfied")
}
}
binomial_check(100,.95)
binomial_check<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} else {
print("the first condition is NOT satisfied")
}
if((1-p)n>=10) {
print("The second condition is satisfied")
}else {
print("The second condition is NOT satisfied")
}
}
binomial_check<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} else {
print("the first condition is NOT satisfied")
if(n(1-p)>=10) {
print("The second condition is satisfied")
}else {
print("The second condition is NOT satisfied")
}
}
}
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} else {
print("the first condition is NOT satisfied")
if(n(1-p)>=10) {
print("The second condition is satisfied")
}else {
print("The second condition is NOT satisfied")
}
}
}
bcheck(100,.95)
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
}
}
bcheck(100,.95)
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} Else {
print("The first condition is not satisfied")
}
}
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} Else {
print("The first condition is not satisfied")
}
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} Else {
print("The first condition is not satisfied")
}
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} Else {print("The first condition is not satisfied")
}
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} Else {print("The first condition is not satisfied")}
printmessage2<-function(x){
if(is.na(x))
print("x is a missing value")
else if(x>0)
print("x is greater than zero")
else
print("x is less that zero")
invisible(x)
}
printmessage2("test")
printmessage2(-2)
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is Not satisfied")
}
bcheck(100,.95)
bcheck(10,.95)
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is Not satisfied")
If(n(1-p)>=10)
print("The second condition is satisfied")
}
bcheck(100,.95)
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else if(n(1-p)>=10)
print("The second condition is satisfied")
else if(n(1-p)<10)
print("The second condition is NOT satisfied")
else
print("The first condition is Not satisfied")
}
bcheck(100,.95)
bcheck<-function(n,p){
if((n*p>=10) & (n(1-p)>=10))
print("Both conditions are satisfied")
else
print("One of the conditions was not satisfied")
}
bcheck(100,.95)
bcheck<-function(n,p){
if((n*p>=10) & (n(1-p)>=10)))
print("Both conditions are satisfied")
else
print("One of the conditions was not satisfied")
}
bcheck<-function(n,p){
if((n*p>=10) & ((1-p)n>=10))
print("Both conditions are satisfied")
else
print("One of the conditions was not satisfied")
}
bcheck<-function(n,p){
if((n*p>=10) & ((1-p)n>=10))
print("Both conditions are satisfied")
}
bcheck<-function(n,p){
if(n*p>=10)
print("Both conditions are satisfied")
}
else
print("One of the conditions was not satisfied")
}
bcheck<-function(n,p){
if(n*p>=10)
print("Both conditions are satisfied")
}
bcheck(100,.95)
bcheck(100,9999)
bcheck<-function(n,p){
if(n*p>=10)
print("Both conditions are satisfied")
else
print("One of the conditions was not satisfied")
}
bcheck(100,.10)
bcheck(100,.09)
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is not satisfied")
if(n(1-p)>=10)
print("The second condition is satisfied")
else
print("The second condition is not satisfied")
}
bcheck(100,.95)
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is not satisfied")
if((1-p)n>=10)
print("The second condition is satisfied")
else
print("The second condition is not satisfied")
}
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is not satisfied")
if((1-p)n>=10)
print("The second condition is satisfied")
###else
###print("The second condition is not satisfied")
}
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is not satisfied")
if((1-p)n>=10)
print("The second condition is satisfied")
###else
###print("The second condition is not satisfied")
}
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is not satisfied")
if(n*(1-p)>=10)
print("The second condition is satisfied")
###else
###print("The second condition is not satisfied")
}
bcheck(100,.95)
bcheck(100,.09)
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is not satisfied")
if(n*(1-p)>=10)
print("The second condition is satisfied")
else
print("The second condition is not satisfied")
}
bcheck(100,.95)
bcheck(25,.45)
bcheck(150,.05)
bcheck(500,.015)
dbinom(8,size=10,p=.13)
dbinom(6,size=10,p=.56)
dbinom(2,size=10,p=.56)
dbinom(600,size=1000,p=.56)
round(dbinom(600,size=1000,p=.56)5)
round(dbinom(600,size=1000,p=.56),5)
round(dbinom(600,size=100,p=.56),5)
bcheck(100,.56)
sum(dbinom(60:100, size=100, p=.56))
dbinom(2,size=3,p=.51)
pnorm(34,mean=24,sd=4)
study<-pnorm(34,mean=24,sd=4)
study
1-study
.3*.5
.7*.25
.15/(.15+.175)
pnorm(35,size=3000000, p=.00001)
dbinom(35, size=3000000, p=.00001)
3000000*.00001
dbinom(37, size=3000000, p=.00001)
dbinom(39, size=3000000, p=.00001)
dbinom(30, size=3000000, p=.00001)
library(RXKCD)
library(tm)
library(wordcloud)
library(RColorBrewer)
path <- system.file("xkcd", package = "RXKCD")
datafiles <- list.files(path)
xkcd.df <- read.csv(file.path(path, datafiles))
xkcd.corpus <- Corpus(DataframeSource(data.frame(xkcd.df[, 3])))
xkcd.corpus <- tm_map(xkcd.corpus, removePunctuation)
xkcd.corpus <- tm_map(xkcd.corpus, tolower)
xkcd.corpus <- tm_map(xkcd.corpus, function(x) removeWords(x, stopwords("english")))
tdm <- TermDocumentMatrix(xkcd.corpus)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
pal <- brewer.pal(9, "BuGn")
pal <- pal[-(1:2)]
png("wordcloud.png", width=1280,height=800)
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors=pal, vfont=c("sans serif","plain"))
dev.off()
install.packages("RXKCD")
install.packages("TM")
install.packages("tm")
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RXKCD)
library(tm)
library(wordcloud)
library(RColorBrewer)
path <- system.file("xkcd", package = "RXKCD")
datafiles <- list.files(path)
xkcd.df <- read.csv(file.path(path, datafiles))
xkcd.corpus <- Corpus(DataframeSource(data.frame(xkcd.df[, 3])))
xkcd.corpus <- tm_map(xkcd.corpus, removePunctuation)
xkcd.corpus <- tm_map(xkcd.corpus, tolower)
xkcd.corpus <- tm_map(xkcd.corpus, function(x) removeWords(x, stopwords("english")))
tdm <- TermDocumentMatrix(xkcd.corpus)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
pal <- brewer.pal(9, "BuGn")
pal <- pal[-(1:2)]
png("wordcloud.png", width=1280,height=800)
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors=pal, vfont=c("sans serif","plain"))
dev.off()
install.packages("qdap")
q()
installed.packages
installed.packages()
install.packages("qdap")
.libpaths
.libPaths
.libPaths()
ratings<-function(name,n1,n2,n3,n4,n5){
dist1<-vector()
if(n1>0) {dist1<-rep(1,n1)}
if(n2>0) {dist1<-c(dist1, rep(2,n2))}
if(n3>0) {dist1<-c(dist1, rep(3,n3))}
if(n4>0) {dist1<-c(dist1, rep(4,n4))}
if(n5>0) {dist1<-c(dist1, rep(5,n5))}
print(name)
dist1
dist2<<-dist1
}
ratings<-function(name,n1,n2,n3,n4,n5){
dist1<-vector()
if(n1>0) {dist1<-rep(1,n1)}
if(n2>0) {dist1<-c(dist1, rep(2,n2))}
if(n3>0) {dist1<-c(dist1, rep(3,n3))}
if(n4>0) {dist1<-c(dist1, rep(4,n4))}
if(n5>0) {dist1<-c(dist1, rep(5,n5))}
print(name)
dist1
dist2<<-dist1
}
ratings("foley",1,1,1,1,1)
dist2
R.home()
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
install.packages(RMySQL)
install.packages("RMySQL")
source(http://bioconductor.org/biocLite.R)
biocLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
biocLite("rhdf5")
con=url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode=readLines(con)
close(con)
htmlCode
library(XML)
url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
html<-htmlTreeParse(url,useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
setwd("~/.FY14 Priorities/03_Training/Data Science/Coursera Data Science/coursera_getting_and_cleaning_data/course_project")
## load packages
dev.cur
dev.cur()
