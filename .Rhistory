else
print('no')
}
if(n(1-p)>=10) {}
print("yes")
else
print("no")
}
}
binomial_check<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
else
print("the first condition is NOT satisfied")
}
if(n(1-p)>=10) {
print("The second condition is satisfied")
else
print("The second condition is NOT satisfied")
}
}
binomial_check<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} else {
print("the first condition is NOT satisfied")
}
if(n(1-p)>=10) {
print("The second condition is satisfied")
}else {
print("The second condition is NOT satisfied")
}
}
binomial_check(100,.95)
binomial_check<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} else {
print("the first condition is NOT satisfied")
}
if((1-p)n>=10) {
print("The second condition is satisfied")
}else {
print("The second condition is NOT satisfied")
}
}
binomial_check<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} else {
print("the first condition is NOT satisfied")
if(n(1-p)>=10) {
print("The second condition is satisfied")
}else {
print("The second condition is NOT satisfied")
}
}
}
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} else {
print("the first condition is NOT satisfied")
if(n(1-p)>=10) {
print("The second condition is satisfied")
}else {
print("The second condition is NOT satisfied")
}
}
}
bcheck(100,.95)
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
}
}
bcheck(100,.95)
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} Else {
print("The first condition is not satisfied")
}
}
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} Else {
print("The first condition is not satisfied")
}
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} Else {
print("The first condition is not satisfied")
}
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} Else {print("The first condition is not satisfied")
}
bcheck<-function(n,p) {
if(n*p>=10){
print("The first condition is satisfied")
} Else {print("The first condition is not satisfied")}
printmessage2<-function(x){
if(is.na(x))
print("x is a missing value")
else if(x>0)
print("x is greater than zero")
else
print("x is less that zero")
invisible(x)
}
printmessage2("test")
printmessage2(-2)
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is Not satisfied")
}
bcheck(100,.95)
bcheck(10,.95)
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is Not satisfied")
If(n(1-p)>=10)
print("The second condition is satisfied")
}
bcheck(100,.95)
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else if(n(1-p)>=10)
print("The second condition is satisfied")
else if(n(1-p)<10)
print("The second condition is NOT satisfied")
else
print("The first condition is Not satisfied")
}
bcheck(100,.95)
bcheck<-function(n,p){
if((n*p>=10) & (n(1-p)>=10))
print("Both conditions are satisfied")
else
print("One of the conditions was not satisfied")
}
bcheck(100,.95)
bcheck<-function(n,p){
if((n*p>=10) & (n(1-p)>=10)))
print("Both conditions are satisfied")
else
print("One of the conditions was not satisfied")
}
bcheck<-function(n,p){
if((n*p>=10) & ((1-p)n>=10))
print("Both conditions are satisfied")
else
print("One of the conditions was not satisfied")
}
bcheck<-function(n,p){
if((n*p>=10) & ((1-p)n>=10))
print("Both conditions are satisfied")
}
bcheck<-function(n,p){
if(n*p>=10)
print("Both conditions are satisfied")
}
else
print("One of the conditions was not satisfied")
}
bcheck<-function(n,p){
if(n*p>=10)
print("Both conditions are satisfied")
}
bcheck(100,.95)
bcheck(100,9999)
bcheck<-function(n,p){
if(n*p>=10)
print("Both conditions are satisfied")
else
print("One of the conditions was not satisfied")
}
bcheck(100,.10)
bcheck(100,.09)
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is not satisfied")
if(n(1-p)>=10)
print("The second condition is satisfied")
else
print("The second condition is not satisfied")
}
bcheck(100,.95)
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is not satisfied")
if((1-p)n>=10)
print("The second condition is satisfied")
else
print("The second condition is not satisfied")
}
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is not satisfied")
if((1-p)n>=10)
print("The second condition is satisfied")
###else
###print("The second condition is not satisfied")
}
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is not satisfied")
if((1-p)n>=10)
print("The second condition is satisfied")
###else
###print("The second condition is not satisfied")
}
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is not satisfied")
if(n*(1-p)>=10)
print("The second condition is satisfied")
###else
###print("The second condition is not satisfied")
}
bcheck(100,.95)
bcheck(100,.09)
bcheck<-function(n,p){
if(n*p>=10)
print("The first condition is satisfied")
else
print("The first condition is not satisfied")
if(n*(1-p)>=10)
print("The second condition is satisfied")
else
print("The second condition is not satisfied")
}
bcheck(100,.95)
bcheck(25,.45)
bcheck(150,.05)
bcheck(500,.015)
dbinom(8,size=10,p=.13)
dbinom(6,size=10,p=.56)
dbinom(2,size=10,p=.56)
dbinom(600,size=1000,p=.56)
round(dbinom(600,size=1000,p=.56)5)
round(dbinom(600,size=1000,p=.56),5)
round(dbinom(600,size=100,p=.56),5)
bcheck(100,.56)
sum(dbinom(60:100, size=100, p=.56))
dbinom(2,size=3,p=.51)
pnorm(34,mean=24,sd=4)
study<-pnorm(34,mean=24,sd=4)
study
1-study
.3*.5
.7*.25
.15/(.15+.175)
pnorm(35,size=3000000, p=.00001)
dbinom(35, size=3000000, p=.00001)
3000000*.00001
dbinom(37, size=3000000, p=.00001)
dbinom(39, size=3000000, p=.00001)
dbinom(30, size=3000000, p=.00001)
library(RXKCD)
library(tm)
library(wordcloud)
library(RColorBrewer)
path <- system.file("xkcd", package = "RXKCD")
datafiles <- list.files(path)
xkcd.df <- read.csv(file.path(path, datafiles))
xkcd.corpus <- Corpus(DataframeSource(data.frame(xkcd.df[, 3])))
xkcd.corpus <- tm_map(xkcd.corpus, removePunctuation)
xkcd.corpus <- tm_map(xkcd.corpus, tolower)
xkcd.corpus <- tm_map(xkcd.corpus, function(x) removeWords(x, stopwords("english")))
tdm <- TermDocumentMatrix(xkcd.corpus)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
pal <- brewer.pal(9, "BuGn")
pal <- pal[-(1:2)]
png("wordcloud.png", width=1280,height=800)
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors=pal, vfont=c("sans serif","plain"))
dev.off()
install.packages("RXKCD")
install.packages("TM")
install.packages("tm")
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RXKCD)
library(tm)
library(wordcloud)
library(RColorBrewer)
path <- system.file("xkcd", package = "RXKCD")
datafiles <- list.files(path)
xkcd.df <- read.csv(file.path(path, datafiles))
xkcd.corpus <- Corpus(DataframeSource(data.frame(xkcd.df[, 3])))
xkcd.corpus <- tm_map(xkcd.corpus, removePunctuation)
xkcd.corpus <- tm_map(xkcd.corpus, tolower)
xkcd.corpus <- tm_map(xkcd.corpus, function(x) removeWords(x, stopwords("english")))
tdm <- TermDocumentMatrix(xkcd.corpus)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
pal <- brewer.pal(9, "BuGn")
pal <- pal[-(1:2)]
png("wordcloud.png", width=1280,height=800)
wordcloud(d$word,d$freq, scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors=pal, vfont=c("sans serif","plain"))
dev.off()
install.packages("qdap")
q()
installed.packages
installed.packages()
install.packages("qdap")
.libpaths
.libPaths
.libPaths()
ratings<-function(name,n1,n2,n3,n4,n5){
dist1<-vector()
if(n1>0) {dist1<-rep(1,n1)}
if(n2>0) {dist1<-c(dist1, rep(2,n2))}
if(n3>0) {dist1<-c(dist1, rep(3,n3))}
if(n4>0) {dist1<-c(dist1, rep(4,n4))}
if(n5>0) {dist1<-c(dist1, rep(5,n5))}
print(name)
dist1
dist2<<-dist1
}
ratings<-function(name,n1,n2,n3,n4,n5){
dist1<-vector()
if(n1>0) {dist1<-rep(1,n1)}
if(n2>0) {dist1<-c(dist1, rep(2,n2))}
if(n3>0) {dist1<-c(dist1, rep(3,n3))}
if(n4>0) {dist1<-c(dist1, rep(4,n4))}
if(n5>0) {dist1<-c(dist1, rep(5,n5))}
print(name)
dist1
dist2<<-dist1
}
ratings("foley",1,1,1,1,1)
dist2
R.home()
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
install.packages(RMySQL)
install.packages("RMySQL")
source(http://bioconductor.org/biocLite.R)
biocLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
biocLite("rhdf5")
con=url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode=readLines(con)
close(con)
htmlCode
library(XML)
url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
html<-htmlTreeParse(url,useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
if(!file.exists("./data")){dir.create(".data")}
fileUrl<-"https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv")
restData<-read.csv("./data/restaurants.csv")
setwd("~/.FY14 Priorities/03_Training/Data Science/Coursera Data Science/coursera_getting_and_cleaning_data")
if(!file.exists("./data")){dir.create(".data")}
fileUrl<-"https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv")
restData<-read.csv("./data/restaurants.csv")
head(restData, n=3)
sum(is.na(restData$councilDistrict))
any(is.na(restData$CouncilDistrict))
all(restData$zipCode>0)
colSums(is.na(restDat))
colSums(is.na(restData))
all(colSums(is.na(restData)))
all(colSums(is.na(restData))=0)
all(colSums(is.na(restData))==0)
table(restData$zipCode %in% c("21212"))
table(restData$zipCode %in% c("21212", "21213"))
restData[restData$zipCode %in% c("21212", "21213")]
restData[restData$zipCode %in% c("21212", "21213"),]
data(UCBAdmission)
data(UCBAdmissions)
DF=as.data.frame(UCBAdmissions)
summary(DF)
class(DF)
xt<-xtabs(Freq~Gender+Admit, data=DF)
xt
data(warpbreaks)
warpbreaks$replicate<-rep(1:9, len=54)
xt=xtabs(breaks~.,data=warpbreaks)
xt
ftables(xt)
ftable(xt)
fakeData=rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData), units="Mb")
print(object.size(fakeData), units="Gb")
print(object.size(fakeData), units="Tb")
print(object.size(fakeData), units="Kb")
print(object.size(fakeData), units="b")
print(object.size(fakeData), units="Mb")
if(!file.exists("./data")){dir.create(".data")}
fileUrl<-"https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv")
restData<-read.csv("./data/restaurants.csv")
s1<-seq(1,10,by=2); s1
s2<-seq(1,10,length=3); s2
x<-c(1,3,8,25,100); seq(along=x)
restData$nearMe=restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
table(restData$zipWrong, restData$zipCode<0)
restData$zipWrong=ifelse(restData$zipCode<0,TRUE, FALSE) ## returns true if condition is true, false if condition is false
table(restData$zipWrong, restData$zipCode<0)
restData$zipWrong=ifelse(restData$zipCode<0,TRUE, FALSE) ## returns true if condition is true, false if condition is false
table(restData$zipWrong, restData$zipCode<0)
restData$zipGroups=cut(restData$zipCode, breaks, quantile=(restData,zipcode))
table(restData$zipGroups)
restData$zipGroups=cut(restData$zipCode, breaks=quantile=(restData,zipcode))
table(restData$zipGroups)
restData$zipGroups=cut(restData$zipCode, breaks=quantile=(restData,zipcode))
restData$zipGroups=cut(restData$zipCode, breaks=quantile(restData,zipcode))
restData$zipGroups=cut(restData$zipCode, breaks=quantile(restData,zipCode))
table(restData$zipGroups)
restData$zipGroups=cut(restData$zipCode, breaks=quantile(restData,zipCode))
restData$zipGroups=cut(restData$zipCode, breaks=quantile(restData$zipCode))
table(restData$zipGroups)
table(restData$zipGroups, restData$zipCode)
library(Hmisc)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups=cut2(restData$zipCode,g=4)
table(restData$zipGroups)
restData$zcf<-factor(restData$zipCode)
restData$zcf[1:10]
class(restData$zcf)
yesno<-sample(c("yes","no"),size=10, replace=TRUE)
yesnofac=factor(yesno, levels=c("yes", "no"))
relevel(yesnofac, ref="yes")
as.numberic(yesnofac)
as.numeric(yesnofac)
Library(Hmisc)
restData$zipGroups=cut2(restData$zipCode,g=4)
table(restData$zipGroups)
restData$zipGroups=cut2(restData$zipCode,g=5)
table(restData$zipGroups)
restData$zipGroups=cut2(restData$zipCode,g=15)
table(restData$zipGroups)
class(restData$zipGroups)
restData2=mutate(restData,zipGroups=cut2(zipCode,g=4))
table(restData$zipGroups)
library(Hmisc); library(plyr)
restData2=mutate(restData,zipGroups=cut2(zipCode,g=4))
table(restData$zipGroups)
table(restData2$zipGroups)
library(reshape2)
head(mtcars)
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
head(mtcars)
mtcars$carname<-rownames(mtcars)
carMelt<-melt(mtcars,id=c("carname", "gear", "cyl"), measure.vars=c("mpg", "hp"))
head(carMelt, n=3)
mtcars
head(carMelt, n=3)
tail(carMelt, n=3)
cylData<-dcast(carMelt, cyl~variable)
cylData
cylData<-dcast(carMelt, cyl~variable, mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
spIns=split(InsectSpray$Count, InsectSprays$spray)
spIns=split(InsectSpray$count, InsectSprays$spray)
spIns=split(InsectSprays$count, InsectSprays$spray)
spIns
sprCount=lapply(spIns, sum)
sprCount
unlist(sprCount)
sapply(spIns,sum)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
spray(Sums)<-ddply(InsectSprays,.(spray), summarize, sum=ave(count, FUN=sum))
dim(spraySums)
spraySums<-ddply(InsectSprays,.(spray), summarize, sum=ave(count, FUN=sum))
dim(spraySums)
head(spraySums)
spraySums
